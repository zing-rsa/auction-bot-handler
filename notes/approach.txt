Holder verify:

Sign tx
Gets stake key
check account associated addresses
loop addresses
 do - call address assets
    - add to list
 while - address assets == 100

 check all assets:
 loop:
 if policy == moon policy 
    verified



blockfrost has assets associated with account address

do 
 call assets
 if assets contains moon policy
 return true
while assets == 100




moon policy: e5a2bcc51466942a9db1da62471a1b682bde3abcebafee2c7fb1e378



Individual bot functionality:

bot details
- commands: 
 - holder-verify
  - alias
  - setup requirements
  - 
  - details (dynamic object used in)
   - policy


adds functionality object to config json (eg):

    "functionality": {
        "commands": [
            {
                "name": "verify-wallet",
                "details": {
                    "additionalChecks": [
                        {
                            "holdsPolicy": "e5a2bcc51466942a9db1da62471a1b682bde3abcebafee2c7fb1e378"
                        }
                    ],
                    "additionalActions": [
                        {
                            "assignRole": "holder" 
                        }
                    ]
                }
            }
        ]
    },






wallet verify:
 - verfiy.js 
    - setInverval that runs for each key in 'verifying' map
      - polls blockfrost with addy
        - checks if any tx in the last 10 min == any key in verifying()
    - add method adds to verifying list, and sets interval
      - either on timeout or verification the interval is cleared

 - slash-commands/verify.js
   - random nu gen
   - replies with amount and addy
     - adds to verify.js 'verifying' map - key is amount
     - creates timeout for 10 min to remove wallet from verifying 

    - once successfully verified, 
      - create new db entry with stake_key and discid

    - on bid, find stake_key in db,
      - post to blockfrost, check enough controlled stake

- multiple bots managed by a single server
- need to store multiple sets of credentials, one for each bots
  - each bot is specific to one guild
    - guild
    - client_id
    - token

- need to store all auctions 
  - client_id
  - owner(bot)
  - all other details

- on startup
  - connect to db
  - pull bots
  - for each bot
    - create client, store this object somewhere 
    - link up events
    - link up commands
  - pull auctions
    - check for earliest start date
    - set event timer for that

mvp:

- can run all commands as previous bot?
- can run two bots? 

1. build one bot that is fetches it's config from a reproducable source(mongo) - DONE
2. run two bots at same time with simple commands - DONE
3. add complex commands
4. run two bots with complex commands

Required perms:

- manage roles
- manage channels
- send embeds
- read message history
- read messages
- send messages

  
